Steps for creating a new Starter project manually without a Project Creator Application.

These steps assume you have already checked out code from the Mechatronics repository: http:???????? Ask your Instructor/TA
1.  First decide on a name for your project without spaces or special characters. i.e. DanLab1.  Then create a new folder 
	that has this same project name in the trunk folder of your repository.

2.  Copy all the contents of this manualproject directory into your newly created folder: 
	lnk.cmd, out2bootbin.cmd, postBuildStep_Debug.bit, DSPBIOS, include, PRUcode, src.

3.  Also in this new project directory create another folder called '<YourProjectName>Project' i.e. DanLab1Project	
	
4.  In the copied 'src' folder, rename the user_labsource.c file  to user_<YourProjectName>.c ie. user_DanLab1.c; 
 
5.  In the copied 'include' folder, open the projectinclude.h file with a text editor and change the first line 
	(#include "PROJECTNAMEcfg.h") to reflect the name of your new project.  For example, if your new project is 
	named "DanLab1" change the first line to #include "DanLab1cfg.h"  It is important that this line has the exact name 
	of the project you will create below in step 7, because the file being included is a file generated by CCS.   
	
6.  Open the copied postBuildStep_Debug.bat file with a text editor.  On line 27, change PROJECTNAME.bin and PROJECTNAME.out
	to reflect the name of your project.  For example, if your new project is named "DanLab1" change line 27 to read: 
	echo hex6x.exe %PROJECT_ROOT%\..\out2bootbin.cmd -o %PROJECT_ROOT%\..\DanLab1.bin %PROJECT_ROOT%\debug\DanLab1.out >> temp_postBuildStep_Debug.bat
	
7.  Now you are ready to open Code Composer Studio 5.1 to create your new project.  When starting CCS 5.1 choose the 'workspace' directory located
	in the root of your repository checkout directory.  Then select Project->New CCS Project.  
	In the New CCS Project Dialog enter/select the following:
	Project Name:  The name you chose above  i.e. DanLab1
	Output Type: Executable
	Uncheck: Use Default Location and Browse to select <Your Repository Directory>\trunk\<YourProjectName>\<YourProjectName>Project
			i.e.  '......\trunk\DanLab1\DanLab1Project'
	Family:  C6000
	Variant:  Box1: Leave as Default '<select or type filter text>' Box2: 'Generic C674x Device'
	Project templates and examples:  Select 'Empty Project'
	Select Finish  To create your project.
	
9.  If you Explore your newly created project you will see that a main.c file was created for you.  The given files already contain a main() function.
	So delete main.c by right clicking on it in your project and selecting Delete. 
	
10. In this step you will add all the files needed into this project.  For each items below right click on your project and select Add files....
	-  	All *.c files in <YourProjectName>\src  Use Shift and Left Mouse Click to select all files.
		Then you will be prompted 'Select how files should be imported into the project'
		Select 'Link to files and check 'Create link locations to: PROJECT_LOC'
		OK
	-	Repeat the process and add <YourProjectName>\lnk.cmd
	-	And ....\trunk\bsl\lib\evmomapl138_bsl.lib
	-	And ....\trunk\\trunk\c67xmathlib_2_01_00_00\lib\c674xfastMath.lib
	
11.   Now you will add a DSP/BIOS configuration file.  Make sure your newly created Project is highlighted and select menu 
       File->New>DSP/BIOS v5.x Configuration File.  A Dialog will pop up and name the TCF file <yourprojectname>.tcf i.e. DanLab1.tcf.
       A second Dialog will appear and scoll and select the OMAPL138 platform ti.platforms.expOMAPL138.  Then NEXT and leave
       all option checked then finally FINISH.  
       Your new TCF file will appear and set the following settings.  If a setting is not mentioned leave the default value
       
	System > Global Settings  (Right click and select Properties)
		64PL2CFG Mode 0k to 32k
		MAR 128-159 bitmask 0x00000000 to 0x00000001
	Memory
		right click MEM - Memory Section Manager, change stack to 0x0c00, uncheck No Dynamic Memory Heaps, click ok on popup, click apply,
		click ok to close mem section manager properties, in DDR create a heap of default size, in IRAM change length to 0x30000,
		create a heap of 0x2000 size go back to MEM Memory section manager, change segments to IRAM.
		
	Instrumentation > LOG - Event Log Manager
		LOG_system > change buflen to 512
		
	Scheduling 
		PRD - Periodic Function Manager
			Insert PRD : PRD_sendtof28335
				period (ticks): 25
				Function: _startMcBSP
			Insert PRD : PRD_time
				1 tick
				_addtime
		HWI - Hardware Interrupt Service
			HWI_INT4
				interrupt selection number: 95
				function: _VPIF_HWI
				use dispatcher checked
			HWI_INT5
				interrupt selection number: 91
				function: _EDMA3_1_ISR
				use dispatcher checked
			HWI_INT6
				interrupt selection number: 6
				function: _PRU_HWI
				use dispatcher checked
			HWI_INT8
				interrupt selection number: 8
				function: _EDMA3_0_ISR
				use dispatcher checked
				
		SWI - Software Interrupt Manager
			PRD_swi
				priority: 4
			Insert: SWI_lcd
				Function: _LCDswi
				priority: 1
			Insert SWI_robotout
				Function: _RobotControl
				priority: 3
			Insert SWI_vision
				Function: _visionswi
				priority: 2
				
				
11. Now you will set all the build options for the TI C compiler  NOTE:  If an option is not mentioned
	just use the default value.
	-  Right click on your project and select 'Properties'
	i.	On the Left Select Build, on the right select 'Build Steps' then cut and paste (quotes and all) the following in
		Post-build steps->Command   "${PROJECT_ROOT}/../postBuildStep_Debug.bat" PROJECT_ROOT ${PROJECT_ROOT} !
	ii.	On the Left Select 'Basic Options' under 'C6000 Compiler'
			Target processor version:	6740
			Debugging model:	Full symbolic debug (--symdebug:dwarf, -g)
			Optimization level:	3
	iii.On the Left Select 'Include Options' under 'C6000 Compiler'
		Add the following directories to 'Add dir to #include search path', make sure to include the ""
		"${PROJECT_ROOT}/../../bsl/inc"
		"${PROJECT_ROOT}/.."
		"${PROJECT_ROOT}/../../c67xmathlib_2_01_00_00/inc"
		"${PROJECT_ROOT}/../../mcbsp_com"
		"${PROJECT_ROOT}/../../sharedmem_com"
		"${PROJECT_ROOT}/../include"
		"${TCONF_OUTPUT_DIR}"
		"${BIOS_INCLUDE_DIR}"
		"${RTDX_INCLUDE_DIR}"
	iv. On the Left Select 'Predefined Symbols' under 'C6000 Compiler'
		Add the following to 'Pre-define NAME'
		RUNNING_ON_OMAPL138
		_DEBUG
	v.	On the Left Select 'Basic Options' under 'C6000 Linker' 
		Set 'Set C system stack size'  to 0xC00
	vi.	Select OK
	

17.  Last step is to setup a Target Configuration File that tells CCS what type of JTAG you will be using to debug your code.
      In the lab we have USBXDS510 JTAGS.  
      Right click on your project select new > target configuration file.  A dialog will appear asking for a filename.  Name it USBXDS510.ccxml and 
      press Finish.  Then the ccxml file will open.  
      Select    
	Connection:  Spectrum Digital XDS510USB Emulator
	Board or Device: Scroll, Find and Check:  OMAPL138
	Finally Click Save button on right.  























			
	